// Generated by CoffeeScript 1.12.4
var CONNECTION_ERRORS, Dredd, Runner, applyConfiguration, async, configureReporters, dreddTransactions, fs, glob, handleRuntimeProblems, logger, options, removeDuplicates, request, url,
  hasProp = {}.hasOwnProperty;

glob = require('glob');

fs = require('fs');

async = require('async');

request = require('request');

url = require('url');

logger = require('./logger');

options = require('./options');

Runner = require('./transaction-runner');

applyConfiguration = require('./configuration').applyConfiguration;

handleRuntimeProblems = require('./handle-runtime-problems');

dreddTransactions = require('dredd-transactions');

configureReporters = require('./configure-reporters');

CONNECTION_ERRORS = ['ECONNRESET', 'ENOTFOUND', 'ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNREFUSED', 'EHOSTUNREACH', 'EPIPE'];

removeDuplicates = function(arr) {
  return arr.reduce(function(alreadyProcessed, currentItem) {
    if (alreadyProcessed.indexOf(currentItem) === -1) {
      return alreadyProcessed.concat(currentItem);
    }
    return alreadyProcessed;
  }, []);
};

Dredd = (function() {
  function Dredd(config) {
    this.init(config);
  }

  Dredd.prototype.init = function(config) {
    this.configuration = applyConfiguration(config);
    this.tests = [];
    this.stats = {
      tests: 0,
      failures: 0,
      errors: 0,
      passes: 0,
      skipped: 0,
      start: 0,
      end: 0,
      duration: 0
    };
    this.transactions = [];
    this.runner = new Runner(this.configuration);
    return configureReporters(this.configuration, this.stats, this.tests, this.runner);
  };

  Dredd.prototype.run = function(callback) {
    var base, base1, key, passedConfigData, ref, val;
    this.configDataIsEmpty = true;
    if ((base = this.configuration).files == null) {
      base.files = [];
    }
    if ((base1 = this.configuration).data == null) {
      base1.data = {};
    }
    passedConfigData = {};
    ref = this.configuration.data || {};
    for (key in ref) {
      if (!hasProp.call(ref, key)) continue;
      val = ref[key];
      this.configDataIsEmpty = false;
      if (typeof val === 'string') {
        passedConfigData[key] = {
          filename: key,
          raw: val
        };
      } else if ((typeof val === 'object') && val.raw && val.filename) {
        passedConfigData[val.filename] = {
          filename: val.filename,
          raw: val.raw
        };
      }
    }
    if (!this.configDataIsEmpty) {
      this.configuration.data = passedConfigData;
    }
    this.configuration.options.path = removeDuplicates(this.configuration.options.path);
    logger.verbose('Expanding glob patterns.');
    return this.expandGlobs((function(_this) {
      return function(globsErr) {
        if (globsErr) {
          return callback(globsErr, _this.stats);
        }
        logger.verbose('Reading API description files.');
        return _this.loadFiles(function(loadErr) {
          if (loadErr) {
            return callback(loadErr, _this.stats);
          }
          logger.verbose('Parsing API description files and compiling a list of HTTP transactions to test.');
          return _this.compileTransactions(function(compileErr) {
            if (compileErr) {
              return callback(compileErr, _this.stats);
            }
            logger.verbose('Starting reporters and waiting until all of them are ready.');
            return _this.emitStart(function(emitStartErr) {
              if (emitStartErr) {
                return callback(emitStartErr, _this.stats);
              }
              logger.verbose('Starting transaction runner.');
              return _this.startRunner(function(runnerErr) {
                if (runnerErr) {
                  return callback(runnerErr, _this.stats);
                }
                logger.verbose('Wrapping up testing.');
                return _this.transactionsComplete(callback);
              });
            });
          });
        });
      };
    })(this));
  };

  Dredd.prototype.expandGlobs = function(callback) {
    return async.each(this.configuration.options.path, (function(_this) {
      return function(globToExpand, globCallback) {
        if (/^http(s)?:\/\//.test(globToExpand)) {
          _this.configuration.files = _this.configuration.files.concat(globToExpand);
          return globCallback();
        }
        return glob(globToExpand, function(err, match) {
          if (err) {
            return globCallback(err);
          }
          _this.configuration.files = _this.configuration.files.concat(match);
          return globCallback();
        });
      };
    })(this), (function(_this) {
      return function(err) {
        if (err) {
          return callback(err, _this.stats);
        }
        if (_this.configDataIsEmpty && _this.configuration.files.length === 0) {
          err = new Error("API description document (or documents) not found on path: '" + _this.configuration.options.path + "'");
          return callback(err, _this.stats);
        }
        _this.configuration.files = removeDuplicates(_this.configuration.files);
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.loadFiles = function(callback) {
    return async.eachLimit(this.configuration.files, 6, (function(_this) {
      return function(fileUrlOrPath, loadCallback) {
        var host, protocol, ref;
        ref = url.parse(fileUrlOrPath), protocol = ref.protocol, host = ref.host;
        if (host && (protocol === 'http:' || protocol === 'https:')) {
          logger.verbose('Downloading remote file:', fileUrlOrPath);
          return _this.downloadFile(fileUrlOrPath, loadCallback);
        } else {
          return _this.readLocalFile(fileUrlOrPath, loadCallback);
        }
      };
    })(this), callback);
  };

  Dredd.prototype.downloadFile = function(fileUrl, callback) {
    return request.get({
      url: fileUrl,
      timeout: 5000,
      json: false
    }, (function(_this) {
      return function(downloadError, res, body) {
        var err;
        if (downloadError) {
          err = new Error("Error when loading file from URL '" + fileUrl + "'. Is the provided URL correct?");
          return callback(err, _this.stats);
        }
        if (!body || res.statusCode < 200 || res.statusCode >= 300) {
          err = new Error("Unable to load file from URL '" + fileUrl + "'. Server did not send any blueprint back and responded with status code " + res.statusCode + ".");
          return callback(err, _this.stats);
        }
        _this.configuration.data[fileUrl] = {
          raw: body,
          filename: fileUrl
        };
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.readLocalFile = function(filePath, callback) {
    return fs.readFile(filePath, 'utf8', (function(_this) {
      return function(readError, data) {
        var err;
        if (readError) {
          err = new Error("Error when reading file '" + filePath + "' (" + readError.message + "). Is the provided path correct?");
          return callback(err);
        }
        _this.configuration.data[filePath] = {
          raw: data,
          filename: filePath
        };
        return callback(null, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.compileTransactions = function(callback) {
    this.transactions = [];
    return async.each(Object.keys(this.configuration.data), (function(_this) {
      return function(filename, next) {
        var fileData;
        fileData = _this.configuration.data[filename];
        if (fileData.annotations == null) {
          fileData.annotations = [];
        }
        logger.verbose('Compiling HTTP transactions from API description file:', filename);
        return dreddTransactions.compile(fileData.raw, filename, function(compilationError, compilationResult) {
          var error, i, j, len, len1, ref, ref1, warning;
          if (compilationError) {
            return next(compilationError);
          }
          ref = compilationResult.errors;
          for (i = 0, len = ref.length; i < len; i++) {
            error = ref[i];
            error.type = 'error';
            fileData.annotations.push(error);
          }
          ref1 = compilationResult.warnings;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            warning = ref1[j];
            warning.type = 'warning';
            fileData.annotations.push(warning);
          }
          fileData.mediaType = compilationResult.mediaType;
          _this.transactions = _this.transactions.concat(compilationResult.transactions);
          return next();
        });
      };
    })(this), (function(_this) {
      return function(runtimeError) {
        if (runtimeError == null) {
          runtimeError = handleRuntimeProblems(_this.configuration.data);
        }
        return callback(runtimeError, _this.stats);
      };
    })(this));
  };

  Dredd.prototype.emitStart = function(callback) {
    var reporterCount, reporterErrorOccurred;
    reporterCount = this.configuration.emitter.listeners('start').length;
    reporterErrorOccurred = false;
    return this.configuration.emitter.emit('start', this.configuration.data, (function(_this) {
      return function(reporterError) {
        reporterCount--;
        if (reporterError && reporterErrorOccurred === false) {
          reporterErrorOccurred = true;
          return callback(reporterError, _this.stats);
        }
        if (reporterCount === 0 && reporterErrorOccurred === false) {
          return callback(null, _this.stats);
        }
      };
    })(this));
  };

  Dredd.prototype.startRunner = function(callback) {
    this.runner.config(this.configuration);
    return this.runner.run(this.transactions, callback);
  };

  Dredd.prototype.transactionsComplete = function(callback) {
    var reporterCount;
    reporterCount = this.configuration.emitter.listeners('end').length;
    return this.configuration.emitter.emit('end', (function(_this) {
      return function() {
        reporterCount--;
        if (reporterCount === 0) {
          return callback(null, _this.stats);
        }
      };
    })(this));
  };

  return Dredd;

})();

module.exports = Dredd;

module.exports.options = options;
