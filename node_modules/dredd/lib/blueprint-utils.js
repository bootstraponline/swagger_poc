// Generated by CoffeeScript 1.12.4
var NEWLINE_RE, characterIndexToPosition, rangesToLinesText, sortNumbersAscending, warningLocationToRanges;

NEWLINE_RE = /\n/g;

characterIndexToPosition = function(charIndex, code) {
  var codeFragment, ref, row;
  if (charIndex == null) {
    charIndex = 0;
  }
  if (code == null) {
    code = '';
  }
  codeFragment = code.substring(0, charIndex);
  row = (((ref = codeFragment.match(NEWLINE_RE)) != null ? ref.length : void 0) || 0) + 1;
  return {
    row: row
  };
};

sortNumbersAscending = function(a, b) {
  return a - b;
};

warningLocationToRanges = function(warningLocation, text) {
  var i, j, lastLocation, len, len1, loc, locKey, position, range, ranges, rowIndex, rowsIndexes;
  if (warningLocation == null) {
    warningLocation = [];
  }
  if (text == null) {
    text = '';
  }
  if (!warningLocation.length) {
    return [];
  }
  rowsIndexes = [];
  position = characterIndexToPosition(warningLocation[0][0], text);
  rowsIndexes.push(position.row);
  lastLocation = warningLocation[warningLocation.length - 1];
  if (warningLocation.length > 0) {
    for (locKey = i = 0, len = warningLocation.length; i < len; locKey = ++i) {
      loc = warningLocation[locKey];
      if (!(locKey > 0)) {
        continue;
      }
      position = characterIndexToPosition(loc[0], text);
      rowsIndexes.push(position.row);
    }
  }
  rowsIndexes.sort(sortNumbersAscending);
  ranges = [];
  range = {
    start: rowsIndexes[0],
    end: rowsIndexes[0]
  };
  for (j = 0, len1 = rowsIndexes.length; j < len1; j++) {
    rowIndex = rowsIndexes[j];
    if (rowIndex === range.end || rowIndex === range.end + 1) {
      range.end = rowIndex;
    } else {
      ranges.push(range);
      range = {
        start: rowIndex,
        end: rowIndex
      };
    }
  }
  ranges.push(range);
  return ranges;
};

rangesToLinesText = function(ranges) {
  var i, len, pos, range, rangeIndex, ref;
  pos = '';
  ref = ranges || [];
  for (rangeIndex = i = 0, len = ref.length; i < len; rangeIndex = ++i) {
    range = ref[rangeIndex];
    if (rangeIndex > 0) {
      pos += ', ';
    }
    if (range.start !== range.end) {
      pos += "lines " + range.start + "-" + range.end;
    } else {
      pos += "line " + range.start;
    }
  }
  return pos;
};

module.exports = {
  characterIndexToPosition: characterIndexToPosition,
  sortNumbersAscending: sortNumbersAscending,
  warningLocationToRanges: warningLocationToRanges,
  rangesToLinesText: rangesToLinesText
};
