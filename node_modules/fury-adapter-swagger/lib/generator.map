{"version":3,"sources":["src/generator.js"],"names":[],"mappings":";;;;;;;;;2BACwB,aAAa;;;;+BAEnB,mBAAmB;;;;2BACb,eAAe;;;;oBACtB,QAAQ;;;;AAEzB,6BAAM,MAAM,CAAC;AACX,iBAAe,EAAE,IAAI;AACrB,UAAQ,EAAE,CAAC;AACX,WAAS,EAAE,GAAG;CACf,CAAC,CAAC;;AAEI,SAAS,cAAc,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAoC;MAAlC,WAAW,yDAAG,kBAAkB;MAC/E,KAAK,GAAI,MAAM,CAAC,KAAK,CAAC,QAAQ,CAA9B,KAAK;;AACZ,MAAI,KAAK,GAAG,IAAI,CAAC;;AAEjB,MAAI;AACF,QAAI,IAAI,GAAG,MAAM,CAAC,OAAO,IAAI,kCAAM,MAAM,CAAC,CAAC;;AAE3C,QAAI,OAAO,IAAI,AAAC,KAAK,QAAQ,EAAE;AAC7B,UAAI,WAAW,CAAC,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAE;;;AAGvD,YAAI,GAAG,yBAAY,SAAS,CAAC,IAAI,CAAC,CAAC;OACpC,MAAM;;AAEL,YAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;OACtC;KACF;;AAED,SAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;;AAExB,SAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAClC,SAAK,CAAC,WAAW,GAAG,WAAW,CAAC;;AAEhC,sBAAK,QAAQ,CAAC,yBAAyB,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;;AAExD,WAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC7B,CAAC,OAAO,SAAS,EAAE;AAClB,UAAM,CAAC,gBAAgB,CAAC,yBAAY,SAAS,EAAE,MAAM,CAAC,IAAI,0BAClC,WAAW,8CAA2C,CAAC;GAChF;;AAED,SAAO,KAAK,CAAC;CACd;;qBAEc,EAAC,cAAc,EAAd,cAAc,EAAC","file":"src/generator.js","sourcesContent":["\nimport querystring from 'querystring';\n\nimport faker from 'json-schema-faker';\nimport annotations from './annotations';\nimport link from './link';\n\nfaker.option({\n  useDefaultValue: true,\n  maxItems: 5,\n  maxLength: 256,\n});\n\nexport function bodyFromSchema(schema, payload, parser, contentType = 'application/json') {\n  const {Asset} = parser.minim.elements;\n  let asset = null;\n\n  try {\n    let body = schema.example || faker(schema);\n\n    if (typeof(body) !== 'string') {\n      if (contentType.indexOf('x-www-form-urlencoded') !== -1) {\n        // Form data\n        // TODO: check for arrays etc.\n        body = querystring.stringify(body);\n      } else {\n        // JSON\n        body = JSON.stringify(body, null, 2);\n      }\n    }\n\n    asset = new Asset(body);\n\n    asset.classes.push('messageBody');\n    asset.contentType = contentType;\n\n    link.inferred('message-body-generation', asset, parser);\n\n    payload.content.push(asset);\n  } catch (exception) {\n    parser.createAnnotation(annotations.DATA_LOST, parser.path,\n      `Unable to generate ${contentType} example message body out of JSON Schema`);\n  }\n\n  return asset;\n}\n\nexport default {bodyFromSchema};\n"]}