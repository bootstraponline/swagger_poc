// A module for dealing with YAML syntax trees and looking up source map
// location information.

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _yamlJs = require('yaml-js');

var _yamlJs2 = _interopRequireDefault(_yamlJs);

var Ast = (function () {
  function Ast(source) {
    _classCallCheck(this, Ast);

    this.root = _yamlJs2['default'].compose(source);
  }

  // Look up a position in the original source based on a JSON path, for
  // example ['paths', '/test', 'get', 'responses', '200']. Also supported
  // is using a string ('paths./test.get') but it does not understand any
  // escaping.

  _createClass(Ast, [{
    key: 'getPosition',
    value: function getPosition(path) {
      var pieces = _lodash2['default'].isArray(path) ? [].concat(path) : path.split('.');
      var end = undefined;
      var node = this.root;
      var piece = pieces.shift();
      var start = undefined;

      if (!node) {
        return null;
      }

      while (piece !== undefined) {
        var newNode = null;

        if (node.tag === 'tag:yaml.org,2002:map') {
          // This is a may / object with key:value pairs.
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = _getIterator(node.value), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var subNode = _step.value;

              if (subNode[0] && subNode[0].value === piece) {
                newNode = subNode[1];

                if (!pieces.length) {
                  // This is the last item!
                  start = subNode[0].start_mark.pointer;
                  end = subNode[1].end_mark.pointer;
                }
                break;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } else if (node.tag === 'tag:yaml.org,2002:seq') {
          // This is a sequence, i.e. array. Access it by index.
          newNode = node.value[piece];

          if (!pieces.length) {
            // This is the last item!

            if (!newNode && piece > 0 && node.value[piece - 1]) {
              // Element in sequence does not exist. It could have been empty
              // Let's provide the end of previous element
              start = node.value[piece - 1].end_mark.pointer;
              end = start + 1;
            } else {
              start = newNode.start_mark.pointer;
              end = newNode.end_mark.pointer;
            }
          }
        } else {
          // Unknown piece, which will just return no source map.
          return null;
        }

        if (newNode) {
          node = newNode;
        } else {
          // We have no other node so return whatever we have.
          // Better than nothing init?
          return { start: start, end: end };
        }

        piece = pieces.shift();
      }

      return { start: start, end: end };
    }
  }]);

  return Ast;
})();

exports['default'] = Ast;
module.exports = exports['default'];
//# sourceMappingURL=ast.map