{"version":3,"sources":["src/uri-template.js"],"names":[],"mappings":";;;;;;;qBAEwB,gBAAgB;;sBAF1B,QAAQ;;;;AAEP,SAAS,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAmD;MAAjD,oBAAoB,yDAAG,EAAE;MAAE,eAAe,yDAAG,EAAE;;AACtG,MAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,EAAE;;;AAGjE,QAAM,wBAAwB,GAAG,oBAAoB,CAClD,MAAM,CAAC,UAAA,SAAS;aAAI,SAAS,MAAG,KAAK,OAAO;KAAA,CAAC,CAC7C,GAAG,CAAC,UAAA,SAAS;aAAI,SAAS,CAAC,IAAI;KAAA,CAAC,CAAC;;AAEpC,QAAM,mBAAmB,GAAG,eAAe,CAAC,GAAG,CAAC,UAAA,SAAS,EAAI;AAC3D,aAAO,SAAS,CAAC,IAAI,CAAC;KACvB,CAAC,CAAC;;;AAGH,QAAM,cAAc,GAAG,oBAAE,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,wBAAwB,EAAE,mBAAmB,CAAC,CAAC,CAAC;AACxF,QAAM,oBAAoB,GAAG,cAAc,CAAC,MAAM,UAAQ,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,SAAM,EAAE,CAAC;;AAE3F,QAAM,IAAI,QAAM,QAAQ,GAAG,IAAI,GAAG,oBAAoB,AAAE,CAAC;;;;AAIzD,WAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,UAAC,KAAK,EAAK;AACzC,aAAO,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAClC,CAAC,CAAC;GACJ;;AAED,SAAO,QAAQ,GAAG,IAAI,CAAC;CACxB","file":"src/uri-template.js","sourcesContent":["import _ from 'lodash';\n\nexport default function buildUriTemplate(basePath, href, pathObjectParameters = [], queryParameters = []) {\n  if (queryParameters.length > 0 || pathObjectParameters.length > 0) {\n    // Path object parameters apply to all nested resources (operations). Only\n    // the ones marked as query parameters are relevant though\n    const pathObjectParameterNames = pathObjectParameters\n      .filter(parameter => parameter.in === 'query')\n      .map(parameter => parameter.name);\n\n    const queryParameterNames = queryParameters.map(parameter => {\n      return parameter.name;\n    });\n\n    // There can be duplicate parameter names, so we need the unique list\n    const parameterNames = _.uniq([].concat(pathObjectParameterNames, queryParameterNames));\n    const parameterNamesString = parameterNames.length ? `{?${parameterNames.join(',')}}` : '';\n\n    const full = `${basePath}${href}${parameterNamesString}`;\n\n    // Before returning, we replace instances of `-` with `%2d`, but only when\n    // they occur inside of a template variable.\n    return full.replace(/\\{.*?\\}/g, (match) => {\n      return match.replace('-', '%2d');\n    });\n  }\n\n  return basePath + href;\n}\n"]}