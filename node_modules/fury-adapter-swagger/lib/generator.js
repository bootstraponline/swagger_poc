'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.bodyFromSchema = bodyFromSchema;

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _jsonSchemaFaker = require('json-schema-faker');

var _jsonSchemaFaker2 = _interopRequireDefault(_jsonSchemaFaker);

var _annotations = require('./annotations');

var _annotations2 = _interopRequireDefault(_annotations);

var _link = require('./link');

var _link2 = _interopRequireDefault(_link);

_jsonSchemaFaker2['default'].option({
  useDefaultValue: true,
  maxItems: 5,
  maxLength: 256
});

function bodyFromSchema(schema, payload, parser) {
  var contentType = arguments.length <= 3 || arguments[3] === undefined ? 'application/json' : arguments[3];
  var Asset = parser.minim.elements.Asset;

  var asset = null;

  try {
    var body = schema.example || (0, _jsonSchemaFaker2['default'])(schema);

    if (typeof body !== 'string') {
      if (contentType.indexOf('x-www-form-urlencoded') !== -1) {
        // Form data
        // TODO: check for arrays etc.
        body = _querystring2['default'].stringify(body);
      } else {
        // JSON
        body = JSON.stringify(body, null, 2);
      }
    }

    asset = new Asset(body);

    asset.classes.push('messageBody');
    asset.contentType = contentType;

    _link2['default'].inferred('message-body-generation', asset, parser);

    payload.content.push(asset);
  } catch (exception) {
    parser.createAnnotation(_annotations2['default'].DATA_LOST, parser.path, 'Unable to generate ' + contentType + ' example message body out of JSON Schema');
  }

  return asset;
}

exports['default'] = { bodyFromSchema: bodyFromSchema };
//# sourceMappingURL=generator.map