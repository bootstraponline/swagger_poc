{"version":3,"sources":["src/elements/http-message-payload.js"],"names":[],"mappings":";;;;;;;;;;;;;;qBAAe,UAAS,SAAS,EAAE;AACjC,MAAM,YAAY,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;;MAElD,kBAAkB;cAAlB,kBAAkB;;AACX,aADP,kBAAkB,GACR;4BADV,kBAAkB;;AAEpB,iCAFE,kBAAkB,8CAEX,SAAS,EAAE;AACpB,UAAI,CAAC,qBAAqB,GAAG,CAAC,SAAS,CAAC,CAAC;KAC1C;;iBAJG,kBAAkB;;aAchB,gBAAC,IAAI,EAAE;AACX,YAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC/C,YAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,YAAI,OAAO,EAAE;AACX,gBAAM,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,EAAI;AACzC,mBAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;WAC7B,CAAC,CAAC;SACJ;;AAED,eAAO,MAAM,CAAC;OACf;;;WAnBU,eAAG;AACZ,eAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;OACvC;WAEU,aAAC,KAAK,EAAE;AACjB,YAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;OACvC;;;WAec,eAAG;AAChB,YAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAC3C,YAAI,MAAM,EAAE;AACV,iBAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;;AAED,eAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;OACjD;;;WAEgB,eAAG;AAClB,eAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;OACpD;;;WAEc,eAAG;;;AAGhB,eAAO,IAAI,CAAC,MAAM,CAAC,UAAC,IAAI,EAAK;AAC3B,iBAAO,IAAI,CAAC,OAAO,KAAK,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;SACzE,CAAC,CAAC,KAAK,EAAE,CAAC;OACZ;;;WAEoB,eAAG;;;AAGtB,eAAO,IAAI,CAAC,MAAM,CAAC,UAAC,IAAI,EAAK;AAC3B,iBAAO,IAAI,CAAC,OAAO,KAAK,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;SAC/E,CAAC,CAAC,KAAK,EAAE,CAAC;OACZ;;;WAtDG,kBAAkB;KAAS,YAAY;;AAyD7C,SAAO,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;AACzD,SAAO,CAAC,iBAAiB,CAAC,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;CAC3D","file":"src/elements/http-message-payload.js","sourcesContent":["export default function(namespace) {\n  const ArrayElement = namespace.getElementClass('array');\n\n  class HttpMessagePayload extends ArrayElement {\n    constructor() {\n      super(...arguments);\n      this._attributeElementKeys = ['headers'];\n    }\n\n    get headers() {\n      return this.attributes.get('headers');\n    }\n\n    set headers(value) {\n      this.attributes.set('headers', value);\n    }\n\n    header(name) {\n      const headers = this.attributes.get('headers');\n      let header = null;\n\n      if (headers) {\n        header = headers.include(name).map(item => {\n          return item.value.toValue();\n        });\n      }\n\n      return header;\n    }\n\n    get contentType() {\n      const header = this.header('Content-Type');\n      if (header) {\n        return header.join(', ');\n      }\n\n      return this.content && this.content.contentType;\n    }\n\n    get dataStructure() {\n      return this.findByElement('dataStructure').first();\n    }\n\n    get messageBody() {\n      // Returns the *first* message body. Only one should be defined according\n      // to the spec, but it's possible to include more.\n      return this.filter((item) => {\n        return item.element === 'asset' && item.classes.contains('messageBody');\n      }).first();\n    }\n\n    get messageBodySchema() {\n      // Returns the *first* message body schema. Only one should be defined\n      // according to the spec, but it's possible to include more.\n      return this.filter((item) => {\n        return item.element === 'asset' && item.classes.contains('messageBodySchema');\n      }).first();\n    }\n  }\n\n  require('./http-request')(namespace, HttpMessagePayload);\n  require('./http-response')(namespace, HttpMessagePayload);\n}\n"]}