// Generated by CoffeeScript 1.12.2
var child, children, content, match, parent, parents, sift, traverse;

sift = require('sift');

traverse = require('traverse');

match = function(node, query) {
  var sifter;
  sifter = sift(query || {});
  return sifter(node);
};

content = function(node) {
  if (node != null ? node.element : void 0) {
    return content(node.content);
  } else {
    return node;
  }
};

children = function(node, query, options) {
  var results, sifter;
  if (options == null) {
    options = {};
  }
  results = [];
  sifter = sift(query || {});
  traverse(node).forEach(function(childNode) {
    if ((childNode != null ? childNode.element : void 0) && childNode !== node && sifter(childNode)) {
      results.push(childNode);
      if (options.first) {
        this.stop();
      }
    }
  });
  return results;
};

child = function(node, query, options) {
  if (options == null) {
    options = {};
  }
  options.first = true;
  return children(node, query, options)[0];
};

parents = function(node, tree, query, options) {
  var results, sifter, traversal;
  if (options == null) {
    options = {};
  }
  results = [];
  sifter = sift(query || {});
  traversal = traverse(tree);
  traversal.forEach(function(childNode) {
    var i, j, len, parentNode, pathSegmentIndex, ref, ref1, results1, subPath;
    if (childNode === node) {
      ref1 = (function() {
        results1 = [];
        for (var j = 0, ref = this.path.length - 1; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results1.push(j); }
        return results1;
      }).apply(this).reverse();
      for (i = 0, len = ref1.length; i < len; i++) {
        pathSegmentIndex = ref1[i];
        subPath = this.path.slice(0, pathSegmentIndex);
        parentNode = traversal.get(subPath);
        if (parentNode.element && sifter(parentNode)) {
          results.push(parentNode);
          if (options.first) {
            this.stop();
          }
        }
      }
      this.stop();
    }
  });
  return results;
};

parent = function(node, tree, query, options) {
  if (options == null) {
    options = {};
  }
  options.first = true;
  return parents(node, tree, query, options)[0];
};

module.exports = {
  match: match,
  content: content,
  children: children,
  child: child,
  parents: parents,
  parent: parent
};
