// Generated by CoffeeScript 1.12.2
var caseless, child, children, clone, compile, compileHeaders, compileOrigin, compileOriginExampleName, compileParameters, compilePathOrigin, compileRequest, compileResponse, compileUri, content, detectTransactionExamples, expandUriTemplateWithParameters, findRelevantTransactions, parent, ref, validateParameters,
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

clone = require('clone');

caseless = require('caseless');

ref = require('./refract'), child = ref.child, children = ref.children, parent = ref.parent, content = ref.content;

validateParameters = require('./validate-parameters');

detectTransactionExamples = require('./detect-transaction-examples');

expandUriTemplateWithParameters = require('./expand-uri-template-with-parameters');

compile = function(mediaType, parseResult, filename) {
  var annotation, annotations, component, error, errors, group, httpRequest, httpResponse, httpTransaction, i, j, k, l, len, len1, len2, len3, origin, ref1, ref2, ref3, ref4, ref5, ref6, ref7, request, resource, transactions, warning, warnings;
  transactions = [];
  errors = [];
  warnings = [];
  component = 'apiDescriptionParser';
  ref1 = children(parseResult, {
    element: 'annotation'
  });
  for (i = 0, len = ref1.length; i < len; i++) {
    annotation = ref1[i];
    group = annotation.meta.classes[0] === 'warning' ? warnings : errors;
    group.push({
      component: component,
      code: content((ref2 = annotation.attributes) != null ? ref2.code : void 0),
      message: content(annotation),
      location: content(child((ref3 = annotation.attributes) != null ? ref3.sourceMap : void 0, {
        element: 'sourceMap'
      }))
    });
  }
  ref4 = findRelevantTransactions(mediaType, parseResult);
  for (j = 0, len1 = ref4.length; j < len1; j++) {
    httpTransaction = ref4[j];
    resource = parent(httpTransaction, parseResult, {
      element: 'resource'
    });
    httpRequest = child(httpTransaction, {
      element: 'httpRequest'
    });
    httpResponse = child(httpTransaction, {
      element: 'httpResponse'
    });
    origin = compileOrigin(mediaType, parseResult, filename, httpTransaction);
    ref5 = compileRequest(parseResult, httpRequest), request = ref5.request, annotations = ref5.annotations;
    if (request) {
      transactions.push({
        origin: origin,
        pathOrigin: compilePathOrigin(parseResult, filename, httpTransaction),
        request: request,
        response: compileResponse(httpResponse)
      });
    }
    ref6 = annotations.errors;
    for (k = 0, len2 = ref6.length; k < len2; k++) {
      error = ref6[k];
      error.origin = clone(origin);
      errors.push(error);
    }
    ref7 = annotations.warnings;
    for (l = 0, len3 = ref7.length; l < len3; l++) {
      warning = ref7[l];
      warning.origin = clone(origin);
      warnings.push(warning);
    }
  }
  return {
    transactions: transactions,
    errors: errors,
    warnings: warnings
  };
};

findRelevantTransactions = function(mediaType, parseResult) {
  var example, httpTransaction, i, j, len, len1, ref1, ref2, relevantTransactions, transition;
  relevantTransactions = [];
  if (mediaType === 'text/vnd.apiblueprint') {
    children(parseResult, {
      element: 'transition'
    }).map(detectTransactionExamples);
  }
  ref1 = children(parseResult, {
    element: 'transition'
  });
  for (i = 0, len = ref1.length; i < len; i++) {
    transition = ref1[i];
    example = 0;
    ref2 = children(transition, {
      element: 'httpTransaction'
    });
    for (j = 0, len1 = ref2.length; j < len1; j++) {
      httpTransaction = ref2[j];
      if (mediaType === 'text/vnd.apiblueprint') {
        if (httpTransaction.attributes.example !== example) {
          relevantTransactions.push(httpTransaction);
        }
      } else {
        relevantTransactions.push(httpTransaction);
      }
      example = httpTransaction.attributes.example;
    }
  }
  return relevantTransactions;
};

compileRequest = function(parseResult, httpRequest) {
  var annotations, messageBody, ref1, request, uri;
  messageBody = child(httpRequest, {
    element: 'asset',
    'meta.classes': 'messageBody'
  });
  ref1 = compileUri(parseResult, httpRequest), uri = ref1.uri, annotations = ref1.annotations;
  if (uri) {
    request = {
      method: content(httpRequest.attributes.method),
      uri: uri,
      headers: compileHeaders(child(httpRequest, {
        element: 'httpHeaders'
      })),
      body: content(messageBody) || ''
    };
  } else {
    request = null;
  }
  return {
    request: request,
    annotations: annotations
  };
};

compileResponse = function(httpResponse) {
  var messageBody, messageBodySchema, response, schema;
  messageBody = child(httpResponse, {
    element: 'asset',
    'meta.classes': 'messageBody'
  });
  messageBodySchema = child(httpResponse, {
    element: 'asset',
    'meta.classes': 'messageBodySchema'
  });
  response = {
    status: content(httpResponse.attributes.statusCode),
    headers: compileHeaders(child(httpResponse, {
      element: 'httpHeaders'
    })),
    body: content(messageBody) || ''
  };
  schema = content(messageBodySchema);
  if (schema) {
    response.schema = schema;
  }
  return response;
};

compileUri = function(parseResult, httpRequest) {
  var annotations, attributes, cascade, component, error, href, i, j, k, l, len, len1, len2, len3, len4, m, name, parameter, parameters, ref1, ref2, ref3, ref4, ref5, resource, result, transition, warning;
  resource = parent(httpRequest, parseResult, {
    element: 'resource'
  });
  transition = parent(httpRequest, parseResult, {
    element: 'transition'
  });
  cascade = [resource.attributes, transition.attributes, httpRequest.attributes];
  parameters = {};
  annotations = {
    errors: [],
    warnings: []
  };
  href = void 0;
  for (i = 0, len = cascade.length; i < len; i++) {
    attributes = cascade[i];
    if (attributes != null ? attributes.href : void 0) {
      href = content(attributes.href);
    }
    ref1 = compileParameters(attributes != null ? attributes.hrefVariables : void 0);
    for (name in ref1) {
      if (!hasProp.call(ref1, name)) continue;
      parameter = ref1[name];
      parameters[name] = parameter;
    }
  }
  result = validateParameters(parameters);
  component = 'parametersValidation';
  ref2 = result.errors;
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    error = ref2[j];
    annotations.errors.push({
      component: component,
      message: error
    });
  }
  ref3 = result.warnings;
  for (k = 0, len2 = ref3.length; k < len2; k++) {
    warning = ref3[k];
    annotations.warnings.push({
      component: component,
      message: warning
    });
  }
  result = expandUriTemplateWithParameters(href, parameters);
  component = 'uriTemplateExpansion';
  ref4 = result.errors;
  for (l = 0, len3 = ref4.length; l < len3; l++) {
    error = ref4[l];
    annotations.errors.push({
      component: component,
      message: error
    });
  }
  ref5 = result.warnings;
  for (m = 0, len4 = ref5.length; m < len4; m++) {
    warning = ref5[m];
    annotations.warnings.push({
      component: component,
      message: warning
    });
  }
  return {
    uri: result.uri,
    annotations: annotations
  };
};

compileParameters = function(hrefVariables) {
  var defaultValue, exampleValue, i, key, len, member, name, parameters, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, types, v, value;
  parameters = {};
  ref1 = content(hrefVariables) || [];
  for (i = 0, len = ref1.length; i < len; i++) {
    member = ref1[i];
    ref2 = content(member), key = ref2.key, value = ref2.value;
    name = content(key);
    types = content((ref3 = member.attributes) != null ? ref3.typeAttributes : void 0) || [];
    if ((value != null ? value.element : void 0) === 'enum') {
      if (((ref4 = value.attributes) != null ? (ref5 = ref4.samples) != null ? ref5.length : void 0 : void 0) && ((ref6 = value.attributes) != null ? ref6.samples[0].length : void 0)) {
        exampleValue = content(value.attributes.samples[0][0]);
      } else {
        exampleValue = content(content(value)[0]);
      }
      if ((ref7 = value.attributes) != null ? (ref8 = ref7["default"]) != null ? ref8.length : void 0 : void 0) {
        defaultValue = content(value.attributes["default"][0]);
      }
    } else {
      exampleValue = content(value);
      if ((ref9 = value.attributes) != null ? ref9["default"] : void 0) {
        defaultValue = content((ref10 = value.attributes) != null ? ref10["default"] : void 0);
      }
    }
    parameters[name] = {
      required: indexOf.call(types, 'required') >= 0,
      "default": defaultValue,
      example: exampleValue,
      values: (value != null ? value.element : void 0) === 'enum' ? (function() {
        var j, len1, ref11, results;
        ref11 = content(value);
        results = [];
        for (j = 0, len1 = ref11.length; j < len1; j++) {
          v = ref11[j];
          results.push({
            value: content(v)
          });
        }
        return results;
      })() : []
    };
  }
  return parameters;
};

compileHeaders = function(httpHeaders) {
  var headers, i, len, member, name, ref1, value;
  headers = {};
  ref1 = children(httpHeaders, {
    element: 'member'
  });
  for (i = 0, len = ref1.length; i < len; i++) {
    member = ref1[i];
    name = content(content(member).key);
    value = content(content(member).value);
    headers[name] = {
      value: value
    };
  }
  return headers;
};

compileOrigin = function(mediaType, parseResult, filename, httpTransaction) {
  var api, httpRequest, ref1, ref2, ref3, ref4, ref5, resource, resourceGroup, transition;
  api = parent(httpTransaction, parseResult, {
    element: 'category',
    'meta.classes': 'api'
  });
  resourceGroup = parent(httpTransaction, parseResult, {
    element: 'category',
    'meta.classes': 'resourceGroup'
  });
  resource = parent(httpTransaction, parseResult, {
    element: 'resource'
  });
  transition = parent(httpTransaction, parseResult, {
    element: 'transition'
  });
  httpRequest = child(httpTransaction, {
    element: 'httpRequest'
  });
  return {
    filename: filename || '',
    apiName: content((ref1 = api.meta) != null ? ref1.title : void 0) || filename || '',
    resourceGroupName: content(resourceGroup != null ? (ref2 = resourceGroup.meta) != null ? ref2.title : void 0 : void 0) || '',
    resourceName: content((ref3 = resource.meta) != null ? ref3.title : void 0) || content((ref4 = resource.attributes) != null ? ref4.href : void 0) || '',
    actionName: content((ref5 = transition.meta) != null ? ref5.title : void 0) || content(httpRequest.attributes.method) || '',
    exampleName: compileOriginExampleName(mediaType, parseResult, httpTransaction)
  };
};

compilePathOrigin = function(parseResult, filename, httpTransaction) {
  var api, httpRequest, ref1, ref2, ref3, ref4, ref5, resource, resourceGroup, transition;
  api = parent(httpTransaction, parseResult, {
    element: 'category',
    'meta.classes': 'api'
  });
  resourceGroup = parent(httpTransaction, parseResult, {
    element: 'category',
    'meta.classes': 'resourceGroup'
  });
  resource = parent(httpTransaction, parseResult, {
    element: 'resource'
  });
  transition = parent(httpTransaction, parseResult, {
    element: 'transition'
  });
  httpRequest = child(httpTransaction, {
    element: 'httpRequest'
  });
  return {
    apiName: content((ref1 = api.meta) != null ? ref1.title : void 0) || '',
    resourceGroupName: content(resourceGroup != null ? (ref2 = resourceGroup.meta) != null ? ref2.title : void 0 : void 0) || '',
    resourceName: content((ref3 = resource.meta) != null ? ref3.title : void 0) || content((ref4 = resource.attributes) != null ? ref4.href : void 0) || '',
    actionName: content((ref5 = transition.meta) != null ? ref5.title : void 0) || content(httpRequest.attributes.method) || '',
    exampleName: "Example " + httpTransaction.attributes.example
  };
};

compileOriginExampleName = function(mediaType, parseResult, httpTransaction) {
  var contentType, exampleName, headers, httpResponse, ref1, segments, statusCode, transition;
  transition = parent(httpTransaction, parseResult, {
    element: 'transition'
  });
  httpResponse = child(httpTransaction, {
    element: 'httpResponse'
  });
  exampleName = '';
  if (mediaType === 'text/vnd.apiblueprint') {
    if (content(transition.attributes.examples) > 1) {
      exampleName = "Example " + httpTransaction.attributes.example;
    }
  } else {
    statusCode = content(httpResponse.attributes.statusCode);
    headers = compileHeaders(child(httpResponse, {
      element: 'httpHeaders'
    }));
    contentType = (ref1 = caseless(headers).get('content-type')) != null ? ref1.value : void 0;
    segments = [];
    if (statusCode) {
      segments.push(statusCode);
    }
    if (contentType) {
      segments.push(contentType);
    }
    exampleName = segments.join(' > ');
  }
  return exampleName;
};

module.exports = compile;
